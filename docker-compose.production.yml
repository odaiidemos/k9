# Production Docker Compose with Nginx and SSL
version: '3.8'

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-k9operations}
      POSTGRES_USER: ${POSTGRES_USER:-k9user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backups:/backups  # For database backups
    networks:
      - k9-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-k9user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  web:
    build:
      context: .
      dockerfile: Dockerfile.multistage
      target: runtime
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-k9user}:${POSTGRES_PASSWORD:-secure_password_change_me}@db:5432/${POSTGRES_DB:-k9operations}
      SESSION_SECRET: ${SESSION_SECRET:-generate_a_secure_random_string_for_production}
      FLASK_ENV: production
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-k9user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      POSTGRES_DB: ${POSTGRES_DB:-k9operations}
      GUNICORN_WORKERS: ${GUNICORN_WORKERS:-4}
      GUNICORN_MAX_REQUESTS: ${GUNICORN_MAX_REQUESTS:-1000}
      GUNICORN_MAX_REQUESTS_JITTER: ${GUNICORN_MAX_REQUESTS_JITTER:-100}
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - k9-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  nginx:
    image: nginx:1.25-alpine
    depends_on:
      - web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - uploads_data:/var/www/uploads:ro
      - static_data:/var/www/static:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - k9-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Redis for session storage and caching
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-change_me}
    volumes:
      - redis_data:/data
    networks:
      - k9-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Backup service
  backup:
    image: postgres:15-alpine
    depends_on:
      - db
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - k9-network
    command: ["sh", "-c", "while true; do sleep 24h; done"]  # Keep container running
    restart: unless-stopped
    profiles:
      - backup  # Only start with --profile backup

volumes:
  db_data:
    driver: local
  uploads_data:
    driver: local
  static_data:
    driver: local
  logs_data:
    driver: local
  redis_data:
    driver: local

networks:
  k9-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16