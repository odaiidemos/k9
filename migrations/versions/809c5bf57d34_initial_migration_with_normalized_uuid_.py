"""Initial migration with normalized UUID models

Revision ID: 809c5bf57d34
Revises: 
Create Date: 2025-09-06 18:39:53.624945

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '809c5bf57d34'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('shift',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(length=80), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password_hash', sa.String(length=256), nullable=False),
    sa.Column('role', sa.Enum('GENERAL_ADMIN', 'PROJECT_MANAGER', name='userrole'), nullable=False),
    sa.Column('full_name', sa.String(length=100), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('allowed_sections', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('attendance',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('shift_id', sa.UUID(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('entity_type', sa.Enum('EMPLOYEE', 'DOG', name='entitytype'), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('PRESENT', 'ABSENT', 'LATE', 'SICK', 'LEAVE', 'REMOTE', 'OVERTIME', name='attendancestatus'), nullable=False),
    sa.Column('absence_reason', sa.Enum('ANNUAL', 'SICK', 'EMERGENCY', 'TRAINING', 'MISSION', 'NO_REASON', 'OTHER', name='absencereason'), nullable=True),
    sa.Column('late_reason', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('check_in_time', sa.Time(), nullable=True),
    sa.Column('check_out_time', sa.Time(), nullable=True),
    sa.Column('recorded_by_user_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint("(status != 'ABSENT') OR (status = 'ABSENT' AND absence_reason IS NOT NULL)", name='standalone_absence_reason_required_for_absent'),
    sa.ForeignKeyConstraint(['recorded_by_user_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['shift_id'], ['shift.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('shift_id', 'date', 'entity_type', 'entity_id', name='unique_standalone_attendance_record')
    )
    op.create_table('audit_log',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('action', sa.Enum('CREATE', 'EDIT', 'UPDATE', 'DELETE', 'EXPORT', 'LOGIN', 'LOGOUT', name='auditaction'), nullable=False),
    sa.Column('target_type', sa.String(length=50), nullable=True),
    sa.Column('target_id', sa.UUID(), nullable=True),
    sa.Column('target_name', sa.String(length=200), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('old_values', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('new_values', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('session_id', sa.String(length=255), nullable=True),
    sa.Column('extra_data', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dog',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('code', sa.String(length=20), nullable=False),
    sa.Column('breed', sa.String(length=100), nullable=False),
    sa.Column('family_line', sa.String(length=100), nullable=True),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', name='doggender'), nullable=False),
    sa.Column('birth_date', sa.Date(), nullable=False),
    sa.Column('microchip_id', sa.String(length=50), nullable=True),
    sa.Column('current_status', sa.Enum('ACTIVE', 'RETIRED', 'DECEASED', 'TRAINING', name='dogstatus'), nullable=True),
    sa.Column('location', sa.String(length=100), nullable=True),
    sa.Column('specialization', sa.String(length=100), nullable=True),
    sa.Column('color', sa.String(length=50), nullable=True),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('height', sa.Float(), nullable=True),
    sa.Column('birth_certificate', sa.String(length=255), nullable=True),
    sa.Column('photo', sa.String(length=255), nullable=True),
    sa.Column('medical_records', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('assigned_to_user_id', sa.UUID(), nullable=True),
    sa.Column('father_id', sa.UUID(), nullable=True),
    sa.Column('mother_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['assigned_to_user_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['father_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['mother_id'], ['dog.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code'),
    sa.UniqueConstraint('microchip_id')
    )
    with op.batch_alter_table('dog', schema=None) as batch_op:
        batch_op.create_index('idx_dog_birth_date', ['birth_date'], unique=False)
        batch_op.create_index('idx_dog_gender_status', ['gender', 'current_status'], unique=False)
        batch_op.create_index('idx_dog_status_breed', ['current_status', 'breed'], unique=False)

    op.create_table('employee',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('employee_id', sa.String(length=20), nullable=False),
    sa.Column('role', sa.Enum('HANDLER', 'TRAINER', 'BREEDER', 'VET', 'PROJECT_MANAGER', name='employeerole'), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('hire_date', sa.Date(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('certifications', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('assigned_to_user_id', sa.UUID(), nullable=True),
    sa.Column('user_account_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['assigned_to_user_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['user_account_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('employee_id')
    )
    with op.batch_alter_table('employee', schema=None) as batch_op:
        batch_op.create_index('idx_employee_email', ['email'], unique=False)
        batch_op.create_index('idx_employee_role_active', ['role', 'is_active'], unique=False)

    op.create_table('shift_assignment',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('shift_id', sa.UUID(), nullable=False),
    sa.Column('entity_type', sa.Enum('EMPLOYEE', 'DOG', name='entitytype'), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('assigned_date', sa.Date(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['shift_id'], ['shift.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('shift_id', 'entity_type', 'entity_id', name='unique_standalone_shift_entity_assignment')
    )
    op.create_table('attendance_record',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('employee_id', sa.UUID(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('shift', sa.String(length=20), nullable=False),
    sa.Column('scheduled_start', sa.Time(), nullable=True),
    sa.Column('actual_start', sa.Time(), nullable=True),
    sa.Column('scheduled_end', sa.Time(), nullable=True),
    sa.Column('actual_end', sa.Time(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('leave_type', sa.String(length=50), nullable=True),
    sa.Column('substitute_employee_id', sa.UUID(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['substitute_employee_id'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('employee_id', 'date', 'shift', name='unique_attendance')
    )
    op.create_table('dog_maturity',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('dog_id', sa.UUID(), nullable=False),
    sa.Column('maturity_date', sa.Date(), nullable=True),
    sa.Column('maturity_status', sa.Enum('JUVENILE', 'MATURE', 'RETIRED', name='maturitystatus'), nullable=True),
    sa.Column('weight_at_maturity', sa.Float(), nullable=True),
    sa.Column('height_at_maturity', sa.Float(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('employee_dog_assignment',
    sa.Column('employee_id', sa.UUID(), nullable=False),
    sa.Column('dog_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('employee_id', 'dog_id')
    )
    op.create_table('heat_cycle',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('dog_id', sa.UUID(), nullable=False),
    sa.Column('cycle_number', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('duration_days', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('NOT_IN_HEAT', 'IN_HEAT', 'POST_HEAT', 'COMPLETED', 'PRE_HEAT', name='heatstatus'), nullable=True),
    sa.Column('behavioral_changes', sa.Text(), nullable=True),
    sa.Column('physical_signs', sa.Text(), nullable=True),
    sa.Column('appetite_changes', sa.String(length=100), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('production_cycle',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('female_id', sa.UUID(), nullable=False),
    sa.Column('male_id', sa.UUID(), nullable=False),
    sa.Column('cycle_type', sa.Enum('NATURAL', 'ARTIFICIAL', name='productioncycletype'), nullable=False),
    sa.Column('heat_start_date', sa.Date(), nullable=True),
    sa.Column('mating_date', sa.Date(), nullable=False),
    sa.Column('expected_delivery_date', sa.Date(), nullable=True),
    sa.Column('actual_delivery_date', sa.Date(), nullable=True),
    sa.Column('result', sa.Enum('SUCCESSFUL', 'FAILED', 'UNKNOWN', name='productionresult'), nullable=True),
    sa.Column('number_of_puppies', sa.Integer(), nullable=True),
    sa.Column('puppies_survived', sa.Integer(), nullable=True),
    sa.Column('puppies_info', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('prenatal_care', sa.Text(), nullable=True),
    sa.Column('delivery_notes', sa.Text(), nullable=True),
    sa.Column('complications', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['female_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['male_id'], ['dog.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('project',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('code', sa.String(length=20), nullable=False),
    sa.Column('main_task', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('PLANNED', 'ACTIVE', 'COMPLETED', 'CANCELLED', name='projectstatus'), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('duration_days', sa.Integer(), nullable=True),
    sa.Column('expected_completion_date', sa.Date(), nullable=True),
    sa.Column('location', sa.String(length=200), nullable=True),
    sa.Column('mission_type', sa.String(length=100), nullable=True),
    sa.Column('priority', sa.String(length=20), nullable=True),
    sa.Column('manager_id', sa.UUID(), nullable=True),
    sa.Column('project_manager_id', sa.UUID(), nullable=True),
    sa.Column('success_rating', sa.Integer(), nullable=True),
    sa.Column('final_report', sa.Text(), nullable=True),
    sa.Column('lessons_learned', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['manager_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['project_manager_id'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_table('attendance_day',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('employee_id', sa.UUID(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('status', sa.Enum('PRESENT', 'ABSENT', 'LATE', 'SICK', 'LEAVE', 'REMOTE', 'OVERTIME', name='attendancestatus'), nullable=False),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('source', sa.String(length=16), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('locked', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint("(source != 'project') OR (source = 'project' AND project_id IS NOT NULL)", name='project_id_required_for_project_source'),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('employee_id', 'date', name='unique_employee_date')
    )
    with op.batch_alter_table('attendance_day', schema=None) as batch_op:
        batch_op.create_index('ix_attendance_day_date', ['date'], unique=False)
        batch_op.create_index('ix_attendance_day_employee_date', ['employee_id', 'date'], unique=False)

    op.create_table('attendance_day_leave',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('seq_no', sa.Integer(), nullable=False),
    sa.Column('employee_id', sa.UUID(), nullable=True),
    sa.Column('leave_type', sa.Enum('ANNUAL', 'SICK', 'EMERGENCY', 'OTHER', name='leavetype'), nullable=False),
    sa.Column('note', sa.String(length=250), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('project_id', 'date', 'seq_no', name='uq_dayleave_print_slot')
    )
    with op.batch_alter_table('attendance_day_leave', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_attendance_day_leave_date'), ['date'], unique=False)
        batch_op.create_index(batch_op.f('ix_attendance_day_leave_project_id'), ['project_id'], unique=False)
        batch_op.create_index('ix_dayleave_project_date', ['project_id', 'date'], unique=False)

    op.create_table('cleaning_log',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('time', sa.Time(), nullable=False),
    sa.Column('dog_id', sa.UUID(), nullable=False),
    sa.Column('recorder_employee_id', sa.UUID(), nullable=True),
    sa.Column('area_type', sa.String(length=50), nullable=True),
    sa.Column('cage_house_number', sa.String(length=60), nullable=True),
    sa.Column('alternate_place', sa.String(length=120), nullable=True),
    sa.Column('cleaned_house', sa.String(length=10), nullable=True),
    sa.Column('washed_house', sa.String(length=10), nullable=True),
    sa.Column('disinfected_house', sa.String(length=10), nullable=True),
    sa.Column('group_disinfection', sa.String(length=10), nullable=True),
    sa.Column('group_description', sa.String(length=120), nullable=True),
    sa.Column('materials_used', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['recorder_employee_id'], ['employee.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('project_id', 'dog_id', 'date', 'time', name='uq_cleaning_project_dog_dt')
    )
    with op.batch_alter_table('cleaning_log', schema=None) as batch_op:
        batch_op.create_index('ix_cleaning_dog_datetime', ['dog_id', 'date', 'time'], unique=False)
        batch_op.create_index('ix_cleaning_project_date', ['project_id', 'date'], unique=False)

    op.create_table('daily_checkup_log',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('time', sa.Time(), nullable=False),
    sa.Column('dog_id', sa.UUID(), nullable=False),
    sa.Column('examiner_employee_id', sa.UUID(), nullable=True),
    sa.Column('eyes', sa.String(length=50), nullable=True),
    sa.Column('ears', sa.String(length=50), nullable=True),
    sa.Column('nose', sa.String(length=50), nullable=True),
    sa.Column('front_legs', sa.String(length=50), nullable=True),
    sa.Column('hind_legs', sa.String(length=50), nullable=True),
    sa.Column('coat', sa.String(length=50), nullable=True),
    sa.Column('tail', sa.String(length=50), nullable=True),
    sa.Column('severity', sa.String(length=50), nullable=True),
    sa.Column('symptoms', sa.Text(), nullable=True),
    sa.Column('initial_diagnosis', sa.Text(), nullable=True),
    sa.Column('suggested_treatment', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['examiner_employee_id'], ['employee.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('deworming_log',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('time', sa.Time(), nullable=False),
    sa.Column('dog_id', sa.UUID(), nullable=False),
    sa.Column('specialist_employee_id', sa.UUID(), nullable=True),
    sa.Column('dog_weight_kg', sa.Float(), nullable=True),
    sa.Column('product_name', sa.String(length=120), nullable=True),
    sa.Column('active_ingredient', sa.String(length=120), nullable=True),
    sa.Column('standard_dose_mg_per_kg', sa.Float(), nullable=True),
    sa.Column('calculated_dose_mg', sa.Float(), nullable=True),
    sa.Column('administered_amount', sa.Float(), nullable=True),
    sa.Column('amount_unit', sa.String(length=20), nullable=True),
    sa.Column('administration_route', sa.String(length=20), nullable=True),
    sa.Column('batch_number', sa.String(length=60), nullable=True),
    sa.Column('expiry_date', sa.Date(), nullable=True),
    sa.Column('adverse_reaction', sa.String(length=20), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('next_due_date', sa.Date(), nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['specialist_employee_id'], ['employee.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('project_id', 'dog_id', 'date', 'time', name='uq_deworming_project_dog_dt')
    )
    with op.batch_alter_table('deworming_log', schema=None) as batch_op:
        batch_op.create_index('ix_deworming_dog_datetime', ['dog_id', 'date', 'time'], unique=False)
        batch_op.create_index('ix_deworming_project_date', ['project_id', 'date'], unique=False)

    op.create_table('excretion_log',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('time', sa.Time(), nullable=False),
    sa.Column('dog_id', sa.UUID(), nullable=False),
    sa.Column('recorder_employee_id', sa.UUID(), nullable=True),
    sa.Column('stool_color', sa.String(length=50), nullable=True),
    sa.Column('stool_consistency', sa.String(length=50), nullable=True),
    sa.Column('stool_content', sa.String(length=50), nullable=True),
    sa.Column('constipation', sa.Boolean(), nullable=False),
    sa.Column('stool_place', sa.String(length=50), nullable=True),
    sa.Column('stool_notes', sa.Text(), nullable=True),
    sa.Column('urine_color', sa.String(length=50), nullable=True),
    sa.Column('urine_notes', sa.Text(), nullable=True),
    sa.Column('vomit_color', sa.String(length=50), nullable=True),
    sa.Column('vomit_count', sa.Integer(), nullable=True),
    sa.Column('vomit_notes', sa.Text(), nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['recorder_employee_id'], ['employee.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('excretion_log', schema=None) as batch_op:
        batch_op.create_index('ix_excretion_dog_datetime', ['dog_id', 'date', 'time'], unique=False)
        batch_op.create_index('ix_excretion_project_date', ['project_id', 'date'], unique=False)

    op.create_table('feeding_log',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('time', sa.Time(), nullable=False),
    sa.Column('dog_id', sa.UUID(), nullable=False),
    sa.Column('recorder_employee_id', sa.UUID(), nullable=True),
    sa.Column('meal_type_fresh', sa.Boolean(), nullable=False),
    sa.Column('meal_type_dry', sa.Boolean(), nullable=False),
    sa.Column('meal_name', sa.String(length=120), nullable=True),
    sa.Column('prep_method', sa.Enum('BOILED', 'STEAMED', 'SOAKED', 'OTHER', name='prepmethod'), nullable=True),
    sa.Column('grams', sa.Integer(), nullable=True),
    sa.Column('water_ml', sa.Integer(), nullable=True),
    sa.Column('supplements', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('body_condition', sa.Enum('VERY_THIN', 'THIN', 'BELOW_IDEAL', 'NEAR_IDEAL', 'IDEAL', 'ABOVE_IDEAL', 'FULL', 'OBESE', 'VERY_OBESE', name='bodyconditionscale'), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['recorder_employee_id'], ['employee.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('feeding_log', schema=None) as batch_op:
        batch_op.create_index('ix_feeding_log_dog_datetime', ['dog_id', 'date', 'time'], unique=False)
        batch_op.create_index('ix_feeding_log_project_date', ['project_id', 'date'], unique=False)

    op.create_table('grooming_log',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('time', sa.Time(), nullable=False),
    sa.Column('dog_id', sa.UUID(), nullable=False),
    sa.Column('recorder_employee_id', sa.UUID(), nullable=True),
    sa.Column('washed_bathed', sa.Enum('YES', 'NO', name='groomingyesno'), nullable=True),
    sa.Column('shampoo_type', sa.String(length=120), nullable=True),
    sa.Column('brushing', sa.Enum('YES', 'NO', name='groomingyesno'), nullable=True),
    sa.Column('nail_trimming', sa.Enum('YES', 'NO', name='groomingyesno'), nullable=True),
    sa.Column('teeth_brushing', sa.Enum('YES', 'NO', name='groomingyesno'), nullable=True),
    sa.Column('ear_cleaning', sa.Enum('YES', 'NO', name='groomingyesno'), nullable=True),
    sa.Column('eye_cleaning', sa.Enum('YES', 'NO', name='groomingyesno'), nullable=True),
    sa.Column('cleanliness_score', sa.Enum('SCORE_1', 'SCORE_2', 'SCORE_3', 'SCORE_4', 'SCORE_5', name='groomingcleanlinessscore'), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['recorder_employee_id'], ['employee.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('project_id', 'dog_id', 'date', 'time', name='uq_grooming_project_dog_dt')
    )
    with op.batch_alter_table('grooming_log', schema=None) as batch_op:
        batch_op.create_index('ix_grooming_dog_datetime', ['dog_id', 'date', 'time'], unique=False)
        batch_op.create_index('ix_grooming_project_date', ['project_id', 'date'], unique=False)

    op.create_table('incident',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('incident_date', sa.Date(), nullable=False),
    sa.Column('incident_time', sa.Time(), nullable=False),
    sa.Column('incident_type', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('location', sa.String(length=200), nullable=True),
    sa.Column('severity', sa.String(length=20), nullable=True),
    sa.Column('reported_by', sa.UUID(), nullable=True),
    sa.Column('people_involved', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('dogs_involved', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('attachments', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('witness_statements', sa.Text(), nullable=True),
    sa.Column('resolved', sa.Boolean(), nullable=True),
    sa.Column('resolution_notes', sa.Text(), nullable=True),
    sa.Column('resolution_date', sa.Date(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['reported_by'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('mating_record',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('female_id', sa.UUID(), nullable=False),
    sa.Column('male_id', sa.UUID(), nullable=False),
    sa.Column('heat_cycle_id', sa.UUID(), nullable=True),
    sa.Column('mating_date', sa.Date(), nullable=False),
    sa.Column('mating_time', sa.Time(), nullable=True),
    sa.Column('location', sa.String(length=100), nullable=True),
    sa.Column('supervised_by', sa.UUID(), nullable=True),
    sa.Column('success_rate', sa.Integer(), nullable=True),
    sa.Column('duration_minutes', sa.Integer(), nullable=True),
    sa.Column('behavior_observed', sa.Text(), nullable=True),
    sa.Column('complications', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['female_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['heat_cycle_id'], ['heat_cycle.id'], ),
    sa.ForeignKeyConstraint(['male_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['supervised_by'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('performance_evaluation',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('evaluator_id', sa.UUID(), nullable=False),
    sa.Column('target_type', sa.Enum('EMPLOYEE', 'DOG', name='targettype'), nullable=False),
    sa.Column('target_employee_id', sa.UUID(), nullable=True),
    sa.Column('target_dog_id', sa.UUID(), nullable=True),
    sa.Column('evaluation_date', sa.Date(), nullable=False),
    sa.Column('rating', sa.Enum('EXCELLENT', 'GOOD', 'WEAK', name='performancerating'), nullable=False),
    sa.Column('uniform_ok', sa.Boolean(), nullable=True),
    sa.Column('id_card_ok', sa.Boolean(), nullable=True),
    sa.Column('appearance_ok', sa.Boolean(), nullable=True),
    sa.Column('cleanliness_ok', sa.Boolean(), nullable=True),
    sa.Column('punctuality', sa.Integer(), nullable=True),
    sa.Column('job_knowledge', sa.Integer(), nullable=True),
    sa.Column('teamwork', sa.Integer(), nullable=True),
    sa.Column('communication', sa.Integer(), nullable=True),
    sa.Column('obedience_level', sa.Integer(), nullable=True),
    sa.Column('detection_accuracy', sa.Integer(), nullable=True),
    sa.Column('physical_condition', sa.Integer(), nullable=True),
    sa.Column('handler_relationship', sa.Integer(), nullable=True),
    sa.Column('strengths', sa.Text(), nullable=True),
    sa.Column('areas_for_improvement', sa.Text(), nullable=True),
    sa.Column('comments', sa.Text(), nullable=True),
    sa.Column('recommendations', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['evaluator_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['target_dog_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['target_employee_id'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('permission_audit_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('changed_by_user_id', sa.UUID(), nullable=False),
    sa.Column('target_user_id', sa.UUID(), nullable=False),
    sa.Column('section', sa.String(length=50), nullable=False),
    sa.Column('subsection', sa.String(length=100), nullable=False),
    sa.Column('permission_type', sa.Enum('VIEW', 'CREATE', 'EDIT', 'DELETE', 'EXPORT', 'ASSIGN', 'APPROVE', name='permissiontype'), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('old_value', sa.Boolean(), nullable=False),
    sa.Column('new_value', sa.Boolean(), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['changed_by_user_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['target_user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pm_daily_evaluation',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('group_no', sa.Integer(), nullable=False),
    sa.Column('seq_no', sa.Integer(), nullable=False),
    sa.Column('employee_id', sa.UUID(), nullable=True),
    sa.Column('dog_id', sa.UUID(), nullable=True),
    sa.Column('site_name', sa.String(length=120), nullable=True),
    sa.Column('shift_name', sa.String(length=60), nullable=True),
    sa.Column('uniform_ok', sa.Boolean(), nullable=False),
    sa.Column('card_ok', sa.Boolean(), nullable=False),
    sa.Column('appearance_ok', sa.Boolean(), nullable=False),
    sa.Column('cleanliness_ok', sa.Boolean(), nullable=False),
    sa.Column('dog_exam_done', sa.Boolean(), nullable=False),
    sa.Column('dog_fed', sa.Boolean(), nullable=False),
    sa.Column('dog_watered', sa.Boolean(), nullable=False),
    sa.Column('training_tansheti', sa.Boolean(), nullable=False),
    sa.Column('training_other', sa.Boolean(), nullable=False),
    sa.Column('field_deployment_done', sa.Boolean(), nullable=False),
    sa.Column('perf_sais', sa.String(length=10), nullable=True),
    sa.Column('perf_dog', sa.String(length=10), nullable=True),
    sa.Column('perf_murabbi', sa.String(length=10), nullable=True),
    sa.Column('perf_sehi', sa.String(length=10), nullable=True),
    sa.Column('perf_mudarrib', sa.String(length=10), nullable=True),
    sa.Column('violations', sa.Text(), nullable=True),
    sa.Column('is_on_leave_row', sa.Boolean(), nullable=False),
    sa.Column('on_leave_employee_id', sa.UUID(), nullable=True),
    sa.Column('on_leave_dog_id', sa.UUID(), nullable=True),
    sa.Column('on_leave_type', sa.Enum('ANNUAL', 'SICK', 'EMERGENCY', 'OTHER', name='leavetype'), nullable=True),
    sa.Column('on_leave_note', sa.String(length=250), nullable=True),
    sa.Column('is_replacement_row', sa.Boolean(), nullable=False),
    sa.Column('replacement_employee_id', sa.UUID(), nullable=True),
    sa.Column('replacement_dog_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['on_leave_dog_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['on_leave_employee_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['replacement_dog_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['replacement_employee_id'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('pm_daily_evaluation', schema=None) as batch_op:
        batch_op.create_index('ix_pm_daily_group_seq', ['project_id', 'date', 'group_no', 'seq_no'], unique=False)
        batch_op.create_index('ix_pm_daily_project_date', ['project_id', 'date'], unique=False)

    op.create_table('project_assignment',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('dog_id', sa.UUID(), nullable=True),
    sa.Column('employee_id', sa.UUID(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('assigned_from', sa.DateTime(), nullable=True),
    sa.Column('assigned_to', sa.DateTime(), nullable=True),
    sa.Column('assigned_date', sa.Date(), nullable=True),
    sa.Column('unassigned_date', sa.Date(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('(dog_id IS NOT NULL AND employee_id IS NULL) OR (dog_id IS NULL AND employee_id IS NOT NULL)', name='assignment_target_check'),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('project_id', 'dog_id', name='unique_project_dog_assignment'),
    sa.UniqueConstraint('project_id', 'employee_id', name='unique_project_employee_assignment')
    )
    op.create_table('project_dog',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('dog_id', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('assigned_date', sa.Date(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('project_id', 'dog_id', name='unique_project_dog')
    )
    op.create_table('project_dog_assignment',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('dog_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('project_id', 'dog_id')
    )
    op.create_table('project_employee_assignment',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('employee_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('project_id', 'employee_id')
    )
    op.create_table('project_manager_permission',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('can_manage_assignments', sa.Boolean(), nullable=True),
    sa.Column('can_manage_shifts', sa.Boolean(), nullable=True),
    sa.Column('can_manage_attendance', sa.Boolean(), nullable=True),
    sa.Column('can_manage_training', sa.Boolean(), nullable=True),
    sa.Column('can_manage_incidents', sa.Boolean(), nullable=True),
    sa.Column('can_manage_performance', sa.Boolean(), nullable=True),
    sa.Column('can_view_veterinary', sa.Boolean(), nullable=True),
    sa.Column('can_view_breeding', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'project_id', name='unique_user_project_permission')
    )
    op.create_table('project_shift',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sub_permissions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('section', sa.String(length=50), nullable=False),
    sa.Column('subsection', sa.String(length=100), nullable=False),
    sa.Column('permission_type', sa.Enum('VIEW', 'CREATE', 'EDIT', 'DELETE', 'EXPORT', 'ASSIGN', 'APPROVE', name='permissiontype'), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('is_granted', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'section', 'subsection', 'permission_type', 'project_id', name='unique_sub_permission')
    )
    op.create_table('suspicion',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('element_type', sa.Enum('WEAPON', 'DRUG', 'EXPLOSIVE', 'OTHER', name='elementtype'), nullable=False),
    sa.Column('suspicion_type', sa.String(length=100), nullable=True),
    sa.Column('risk_level', sa.String(length=20), nullable=True),
    sa.Column('subtype', sa.String(length=100), nullable=True),
    sa.Column('discovery_date', sa.Date(), nullable=False),
    sa.Column('discovery_time', sa.Time(), nullable=False),
    sa.Column('location', sa.String(length=200), nullable=False),
    sa.Column('detected_by_dog', sa.UUID(), nullable=True),
    sa.Column('handler', sa.UUID(), nullable=True),
    sa.Column('detection_method', sa.String(length=100), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('quantity_estimate', sa.String(length=100), nullable=True),
    sa.Column('attachments', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('authorities_notified', sa.Boolean(), nullable=True),
    sa.Column('evidence_collected', sa.Boolean(), nullable=True),
    sa.Column('follow_up_required', sa.Boolean(), nullable=True),
    sa.Column('follow_up_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['detected_by_dog'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['handler'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('training_session',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('dog_id', sa.UUID(), nullable=False),
    sa.Column('trainer_id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('category', sa.Enum('OBEDIENCE', 'DETECTION', 'AGILITY', 'ATTACK', 'FITNESS', 'BEHAVIOR_IMPROVEMENT', name='trainingcategory'), nullable=False),
    sa.Column('subject', sa.String(length=200), nullable=False),
    sa.Column('session_date', sa.DateTime(), nullable=False),
    sa.Column('duration', sa.Integer(), nullable=False),
    sa.Column('success_rating', sa.Integer(), nullable=False),
    sa.Column('location', sa.String(length=100), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('weather_conditions', sa.String(length=100), nullable=True),
    sa.Column('equipment_used', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['trainer_id'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('veterinary_visit',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('dog_id', sa.UUID(), nullable=False),
    sa.Column('vet_id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('visit_type', sa.Enum('ROUTINE', 'EMERGENCY', 'VACCINATION', name='visittype'), nullable=False),
    sa.Column('visit_date', sa.DateTime(), nullable=False),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('heart_rate', sa.Integer(), nullable=True),
    sa.Column('blood_pressure', sa.String(length=20), nullable=True),
    sa.Column('symptoms', sa.Text(), nullable=True),
    sa.Column('diagnosis', sa.Text(), nullable=True),
    sa.Column('treatment', sa.Text(), nullable=True),
    sa.Column('medications', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('stool_color', sa.String(length=50), nullable=True),
    sa.Column('stool_consistency', sa.String(length=50), nullable=True),
    sa.Column('urine_color', sa.String(length=50), nullable=True),
    sa.Column('vaccinations_given', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('next_visit_date', sa.Date(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('cost', sa.Float(), nullable=True),
    sa.Column('location', sa.String(length=120), nullable=True),
    sa.Column('weather', sa.String(length=80), nullable=True),
    sa.Column('vital_signs', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['vet_id'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pregnancy_record',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('mating_record_id', sa.UUID(), nullable=False),
    sa.Column('dog_id', sa.UUID(), nullable=False),
    sa.Column('confirmed_date', sa.Date(), nullable=True),
    sa.Column('expected_delivery_date', sa.Date(), nullable=True),
    sa.Column('status', sa.Enum('NOT_PREGNANT', 'PREGNANT', 'DELIVERED', name='pregnancystatus'), nullable=True),
    sa.Column('week_1_checkup', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('week_2_checkup', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('week_3_checkup', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('week_4_checkup', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('week_5_checkup', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('week_6_checkup', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('week_7_checkup', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('week_8_checkup', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('ultrasound_results', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('special_diet', sa.Text(), nullable=True),
    sa.Column('exercise_restrictions', sa.Text(), nullable=True),
    sa.Column('medications', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['mating_record_id'], ['mating_record.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('project_attendance',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('shift_id', sa.UUID(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('entity_type', sa.Enum('EMPLOYEE', 'DOG', name='entitytype'), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('PRESENT', 'ABSENT', 'LATE', 'SICK', 'LEAVE', 'REMOTE', 'OVERTIME', name='attendancestatus'), nullable=False),
    sa.Column('absence_reason', sa.Enum('ANNUAL', 'SICK', 'EMERGENCY', 'TRAINING', 'MISSION', 'NO_REASON', 'OTHER', name='absencereason'), nullable=True),
    sa.Column('late_reason', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('check_in_time', sa.Time(), nullable=True),
    sa.Column('check_out_time', sa.Time(), nullable=True),
    sa.Column('recorded_by_user_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint("(status != 'ABSENT') OR (status = 'ABSENT' AND absence_reason IS NOT NULL)", name='absence_reason_required_for_absent'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['recorded_by_user_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['shift_id'], ['project_shift.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('project_id', 'shift_id', 'date', 'entity_type', 'entity_id', name='unique_attendance_record')
    )
    op.create_table('project_attendance_reporting',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('shift_id', sa.UUID(), nullable=True),
    sa.Column('group_no', sa.Integer(), nullable=False),
    sa.Column('seq_no', sa.Integer(), nullable=False),
    sa.Column('employee_id', sa.UUID(), nullable=True),
    sa.Column('substitute_employee_id', sa.UUID(), nullable=True),
    sa.Column('dog_id', sa.UUID(), nullable=True),
    sa.Column('check_in_time', sa.Time(), nullable=True),
    sa.Column('check_out_time', sa.Time(), nullable=True),
    sa.Column('status', sa.Enum('PRESENT', 'ABSENT', 'LATE', 'SICK', 'LEAVE', 'REMOTE', 'OVERTIME', name='attendancestatus'), nullable=False),
    sa.Column('is_project_controlled', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['dog_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['shift_id'], ['project_shift.id'], ),
    sa.ForeignKeyConstraint(['substitute_employee_id'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('project_id', 'date', 'group_no', 'seq_no', name='uq_attendance_print_slot')
    )
    with op.batch_alter_table('project_attendance_reporting', schema=None) as batch_op:
        batch_op.create_index('ix_attendance_group_seq', ['project_id', 'date', 'group_no', 'seq_no'], unique=False)
        batch_op.create_index('ix_attendance_project_date', ['project_id', 'date'], unique=False)
        batch_op.create_index(batch_op.f('ix_project_attendance_reporting_date'), ['date'], unique=False)
        batch_op.create_index(batch_op.f('ix_project_attendance_reporting_project_id'), ['project_id'], unique=False)

    op.create_table('project_shift_assignment',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('shift_id', sa.UUID(), nullable=False),
    sa.Column('entity_type', sa.Enum('EMPLOYEE', 'DOG', name='entitytype'), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('assigned_date', sa.Date(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['shift_id'], ['project_shift.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('shift_id', 'entity_type', 'entity_id', name='unique_shift_entity_assignment')
    )
    op.create_table('delivery_record',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('pregnancy_record_id', sa.UUID(), nullable=False),
    sa.Column('delivery_date', sa.Date(), nullable=False),
    sa.Column('delivery_start_time', sa.Time(), nullable=True),
    sa.Column('delivery_end_time', sa.Time(), nullable=True),
    sa.Column('location', sa.String(length=100), nullable=True),
    sa.Column('vet_present', sa.UUID(), nullable=True),
    sa.Column('handler_present', sa.UUID(), nullable=True),
    sa.Column('assistance_required', sa.Boolean(), nullable=True),
    sa.Column('assistance_type', sa.Text(), nullable=True),
    sa.Column('total_puppies', sa.Integer(), nullable=True),
    sa.Column('live_births', sa.Integer(), nullable=True),
    sa.Column('stillbirths', sa.Integer(), nullable=True),
    sa.Column('delivery_complications', sa.Text(), nullable=True),
    sa.Column('mother_condition', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['handler_present'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['pregnancy_record_id'], ['pregnancy_record.id'], ),
    sa.ForeignKeyConstraint(['vet_present'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('puppy_record',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('delivery_record_id', sa.UUID(), nullable=False),
    sa.Column('puppy_number', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('temporary_id', sa.String(length=20), nullable=True),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', name='doggender'), nullable=False),
    sa.Column('birth_weight', sa.Float(), nullable=True),
    sa.Column('birth_time', sa.Time(), nullable=True),
    sa.Column('birth_order', sa.Integer(), nullable=True),
    sa.Column('alive_at_birth', sa.Boolean(), nullable=True),
    sa.Column('current_status', sa.String(length=50), nullable=True),
    sa.Column('color', sa.String(length=50), nullable=True),
    sa.Column('markings', sa.Text(), nullable=True),
    sa.Column('birth_defects', sa.Text(), nullable=True),
    sa.Column('week_1_weight', sa.Float(), nullable=True),
    sa.Column('week_2_weight', sa.Float(), nullable=True),
    sa.Column('week_3_weight', sa.Float(), nullable=True),
    sa.Column('week_4_weight', sa.Float(), nullable=True),
    sa.Column('week_5_weight', sa.Float(), nullable=True),
    sa.Column('week_6_weight', sa.Float(), nullable=True),
    sa.Column('week_7_weight', sa.Float(), nullable=True),
    sa.Column('week_8_weight', sa.Float(), nullable=True),
    sa.Column('weaning_date', sa.Date(), nullable=True),
    sa.Column('placement_date', sa.Date(), nullable=True),
    sa.Column('placement_location', sa.String(length=100), nullable=True),
    sa.Column('adult_dog_id', sa.UUID(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['adult_dog_id'], ['dog.id'], ),
    sa.ForeignKeyConstraint(['delivery_record_id'], ['delivery_record.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('puppy_training',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('puppy_id', sa.UUID(), nullable=False),
    sa.Column('trainer_id', sa.UUID(), nullable=False),
    sa.Column('training_name', sa.String(length=200), nullable=False),
    sa.Column('training_type', sa.Enum('OBEDIENCE', 'DETECTION', 'AGILITY', 'ATTACK', 'FITNESS', 'BEHAVIOR_IMPROVEMENT', name='trainingcategory'), nullable=False),
    sa.Column('session_date', sa.DateTime(), nullable=False),
    sa.Column('duration', sa.Integer(), nullable=False),
    sa.Column('puppy_age_weeks', sa.Integer(), nullable=True),
    sa.Column('developmental_stage', sa.String(length=50), nullable=True),
    sa.Column('success_rating', sa.Integer(), nullable=False),
    sa.Column('skills_learned', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('behavior_observations', sa.Text(), nullable=True),
    sa.Column('location', sa.String(length=100), nullable=True),
    sa.Column('weather_conditions', sa.String(length=100), nullable=True),
    sa.Column('equipment_used', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('previous_skills', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('new_skills_acquired', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('areas_for_improvement', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['puppy_id'], ['puppy_record.id'], ),
    sa.ForeignKeyConstraint(['trainer_id'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('puppy_training')
    op.drop_table('puppy_record')
    op.drop_table('delivery_record')
    op.drop_table('project_shift_assignment')
    with op.batch_alter_table('project_attendance_reporting', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_project_attendance_reporting_project_id'))
        batch_op.drop_index(batch_op.f('ix_project_attendance_reporting_date'))
        batch_op.drop_index('ix_attendance_project_date')
        batch_op.drop_index('ix_attendance_group_seq')

    op.drop_table('project_attendance_reporting')
    op.drop_table('project_attendance')
    op.drop_table('pregnancy_record')
    op.drop_table('veterinary_visit')
    op.drop_table('training_session')
    op.drop_table('suspicion')
    op.drop_table('sub_permissions')
    op.drop_table('project_shift')
    op.drop_table('project_manager_permission')
    op.drop_table('project_employee_assignment')
    op.drop_table('project_dog_assignment')
    op.drop_table('project_dog')
    op.drop_table('project_assignment')
    with op.batch_alter_table('pm_daily_evaluation', schema=None) as batch_op:
        batch_op.drop_index('ix_pm_daily_project_date')
        batch_op.drop_index('ix_pm_daily_group_seq')

    op.drop_table('pm_daily_evaluation')
    op.drop_table('permission_audit_logs')
    op.drop_table('performance_evaluation')
    op.drop_table('mating_record')
    op.drop_table('incident')
    with op.batch_alter_table('grooming_log', schema=None) as batch_op:
        batch_op.drop_index('ix_grooming_project_date')
        batch_op.drop_index('ix_grooming_dog_datetime')

    op.drop_table('grooming_log')
    with op.batch_alter_table('feeding_log', schema=None) as batch_op:
        batch_op.drop_index('ix_feeding_log_project_date')
        batch_op.drop_index('ix_feeding_log_dog_datetime')

    op.drop_table('feeding_log')
    with op.batch_alter_table('excretion_log', schema=None) as batch_op:
        batch_op.drop_index('ix_excretion_project_date')
        batch_op.drop_index('ix_excretion_dog_datetime')

    op.drop_table('excretion_log')
    with op.batch_alter_table('deworming_log', schema=None) as batch_op:
        batch_op.drop_index('ix_deworming_project_date')
        batch_op.drop_index('ix_deworming_dog_datetime')

    op.drop_table('deworming_log')
    op.drop_table('daily_checkup_log')
    with op.batch_alter_table('cleaning_log', schema=None) as batch_op:
        batch_op.drop_index('ix_cleaning_project_date')
        batch_op.drop_index('ix_cleaning_dog_datetime')

    op.drop_table('cleaning_log')
    with op.batch_alter_table('attendance_day_leave', schema=None) as batch_op:
        batch_op.drop_index('ix_dayleave_project_date')
        batch_op.drop_index(batch_op.f('ix_attendance_day_leave_project_id'))
        batch_op.drop_index(batch_op.f('ix_attendance_day_leave_date'))

    op.drop_table('attendance_day_leave')
    with op.batch_alter_table('attendance_day', schema=None) as batch_op:
        batch_op.drop_index('ix_attendance_day_employee_date')
        batch_op.drop_index('ix_attendance_day_date')

    op.drop_table('attendance_day')
    op.drop_table('project')
    op.drop_table('production_cycle')
    op.drop_table('heat_cycle')
    op.drop_table('employee_dog_assignment')
    op.drop_table('dog_maturity')
    op.drop_table('attendance_record')
    op.drop_table('shift_assignment')
    with op.batch_alter_table('employee', schema=None) as batch_op:
        batch_op.drop_index('idx_employee_role_active')
        batch_op.drop_index('idx_employee_email')

    op.drop_table('employee')
    with op.batch_alter_table('dog', schema=None) as batch_op:
        batch_op.drop_index('idx_dog_status_breed')
        batch_op.drop_index('idx_dog_gender_status')
        batch_op.drop_index('idx_dog_birth_date')

    op.drop_table('dog')
    op.drop_table('audit_log')
    op.drop_table('attendance')
    op.drop_table('user')
    op.drop_table('shift')
    # ### end Alembic commands ###
